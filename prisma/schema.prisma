generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String @default("")       @unique
  emailVerified  DateTime?
  accounts       Account[] // ความสัมพันธ์กับ Account
  sessions       Session[] // ความสัมพันธ์กับ Session
  password       String?
  name   String?
  level      String          @default("user") 
  image   String?
  bg_image String?
  created_at DateTime  @default(now())
  updatedAt DateTime @default(now()) @updatedAt


  songs      Song[]         @relation("UploadedSongs")
  playlists  Playlist[]
  likesongs  LikeSong[]
  diary_like DiaryLike[]
  followers  Follow[]       @relation("Followers")
  following  Follow[]       @relation("Following")
  diaries    Diary[]
  feeds      Feed[]
  shortSongs ShortSong[]
  listeningHistories ListeningHistory[]
  resetTokens PasswordResetToken[]
}

enum Level {
  Nomall
  Premuime
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Song {
  id         Int         @id @default(autoincrement())
  name_song  String
  picture    String?
  audio_url  String      @unique
  like       Int         @default(0)
  description String?
  uploaded_by String
  created_at DateTime    @default(now())

  uploader   User        @relation("UploadedSongs", fields: [uploaded_by], references: [id])
  playlist_songs PlaylistSong[]
  likesongs  LikeSong[]
  feeds      Feed[]
  diary      Diary[]
  shortSongs ShortSong[]
  feed_items FeedItem[]
  song_tags  SongTag[]
  listeningHistories ListeningHistory[]
  stat               SongStat?
}

model Playlist {
  id         Int           @id @default(autoincrement())
  user_id    String
  created_at DateTime      @default(now())
  name_playlist String
  pic_playlists String

  user       User          @relation(fields: [user_id], references: [id])
  playlist_songs PlaylistSong[]
  feeds      Feed[]
}

model PlaylistSong {
  playlist_id Int
  song_id     Int
  created_at  DateTime     @default(now())

  playlist    Playlist     @relation(fields: [playlist_id], references: [id])
  song        Song         @relation(fields: [song_id], references: [id])

  @@id([playlist_id, song_id])
}

model LikeSong {
  id         Int       @id @default(autoincrement())
  user_id    String
  song_id    Int
  created_at DateTime  @default(now())

  user       User      @relation(fields: [user_id], references: [id])
  song       Song      @relation(fields: [song_id], references: [id])

  @@unique([user_id, song_id], name: "user_id_song_id")
}

model DiaryLike {
  id        Int    @id @default(autoincrement())
  diary_id  Int
  user_id   String

  diary     Diary  @relation(fields: [diary_id], references: [id])
  user      User   @relation(fields: [user_id], references: [id])

  @@unique([diary_id, user_id])
}


model Follow {
  following_user_id String
  followed_user_id  String
  created_at       DateTime  @default(now())

  following_user   User      @relation("Following", fields: [following_user_id], references: [id])
  followed_user    User      @relation("Followers", fields: [followed_user_id], references: [id])

  @@id([following_user_id, followed_user_id])
}

model Feed {
  id          Int        @id @default(autoincrement())
  user_id     String
  song_id     Int
  playlist_id Int
  created_at  DateTime   @default(now())

  user        User       @relation(fields: [user_id], references: [id])
  song        Song       @relation(fields: [song_id], references: [id])
  playlist    Playlist   @relation(fields: [playlist_id], references: [id])
}

model FeedSection {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  created_at  DateTime   @default(now())

  feed_items  FeedItem[]
}

model FeedItem {
  id          Int        @id @default(autoincrement())
  section_id  Int
  song_id     Int
  order_index Int
  created_at  DateTime   @default(now())

  section     FeedSection @relation(fields: [section_id], references: [id])
  song        Song       @relation(fields: [song_id], references: [id])
}

model Diary {
  id          Int         @id @default(autoincrement())
  name_diary  String
  content     Json        // เป็น content (แบบ json)
  trimmed_audio_url  String
  song_id     Int?       
  song_removed Boolean   @default(false)     
  user_id     String
  is_private  Boolean     @default(false)
  created_at  DateTime    @default(now())
  
  song        Song?       @relation(fields: [song_id], references: [id]) 
  user        User        @relation(fields: [user_id], references: [id])
  diary_feeds DiaryFeed[]
  stat        DiaryStat?
  diary_like  DiaryLike[]
}

model DiaryFeed {
  id        Int     @id @default(autoincrement())
  diary_id  Int
  comments  String?

  diary     Diary   @relation(fields: [diary_id], references: [id])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name_tag  String    @unique
  song_tags SongTag[]
}

model SongTag {
  song_id Int
  tag_id  Int

  song    Song    @relation(fields: [song_id], references: [id])
  tag     Tag     @relation(fields: [tag_id], references: [id])

  @@id([song_id, tag_id])
}

model ListeningHistory {
  id         Int      @id @default(autoincrement())
  user_id    String
  song_id    Int
  listened_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id])
  song       Song     @relation(fields: [song_id], references: [id])

  @@index([user_id, song_id])
}

model SongStat {
  song_id    Int    @id
  play_count Int    @default(0)
  like_count Int    @default(0)

  song       Song   @relation(fields: [song_id], references: [id])
}

model DiaryStat {
  diary_id   Int    @id
  view_count Int    @default(0)
  like_count Int    @default(0)
 
  diary      Diary  @relation(fields: [diary_id], references: [id]) 
}

model ShortSong {
  id           String   @id @default(cuid())
  userId       String
  songId       Int
  trimmedR2Key String
  start        Float
  duration     Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  song Song @relation(fields: [songId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())
}

