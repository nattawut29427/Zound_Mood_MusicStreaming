import { NextRequest, NextResponse } from "next/server";
import { v4 as uuidv4 } from "uuid";
import { generatePresignedPutUrl, generatePresignedGetUrl } from "@/lib/r2";
import cutter from "mp3-cutter";

import fs from "fs/promises"; // ‡πÉ‡∏ä‡πâ fs/promises ‡πÄ‡∏û‡∏∑‡πà‡∏≠ asynchronous file operations
import path from "path";

export async function POST(req: NextRequest) {
  let inputFilePath: string | undefined;
  let outputFilePath: string | undefined;

  try {
    const formData = await req.formData();
    const file = formData.get("file");
    const start = Number(formData.get("start")); // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    const duration = Number(formData.get("duration")); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

    if (!(file instanceof File)) {
      console.error("‚ùå Invalid file: Not a File instance.");
      return NextResponse.json({ error: "Invalid file" }, { status: 400 });
    }

    if (isNaN(start) || start < 0 || isNaN(duration) || duration <= 0) {
      console.error(`‚ùå Invalid start or duration: start=${start}, duration=${duration}`);
      return NextResponse.json({ error: "Invalid start or duration" }, { status: 400 });
    }

    const tmpDir = path.join(process.cwd(), "tmp");
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå tmp ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (recursive: true ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á parent folders ‡∏î‡πâ‡∏ß‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ)
    await fs.mkdir(tmpDir, { recursive: true });

    inputFilePath = path.join(tmpDir, `${uuidv4()}-input.mp3`);
    outputFilePath = path.join(tmpDir, `${uuidv4()}-trimmed.mp3`);

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå input ‡∏•‡∏á tmp ---
    console.log("üìÅ Attempting to write input file to:", inputFilePath);
    const fileBuffer = Buffer.from(await file.arrayBuffer());
    await fs.writeFile(inputFilePath, fileBuffer);
    console.log("‚úÖ Input file written successfully to:", inputFilePath);

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ mp3-cutter ---
    console.log(`‚úÇÔ∏è Cutting audio from ${start}s for ${duration}s. Input: ${inputFilePath}, Output: ${outputFilePath}`);
    await new Promise<void>((resolve, reject) => {
      cutter.cut({
        src: inputFilePath,
        target: outputFilePath,
        start: start,
        end: start + duration,
      }, (err: Error | null) => { // ‡∏£‡∏±‡∏ö err ‡πÄ‡∏õ‡πá‡∏ô Error ‡∏´‡∏£‡∏∑‡∏≠ null
        if (err) {
          console.error("‚ùå Error cutting audio:", err.message);
          return reject(new Error("Failed to cut audio: " + err.message));
        }
        console.log("‚úÖ Audio cut successfully.");
        resolve();
      });
    });

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å tmp ---
    console.log("üíæ Attempting to read trimmed file from:", outputFilePath);
    const trimmedBuffer = await fs.readFile(outputFilePath);
    console.log(`‚úÖ Trimmed file read successfully. Size: ${trimmedBuffer.length} bytes.`);

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á R2 ---
    const objectKey = `trimmed/${uuidv4()}.mp3`;
    console.log(`‚òÅÔ∏è Generating presigned PUT URL for object key: ${objectKey}`);
    const putUrl = await generatePresignedPutUrl(objectKey, "audio/mpeg");
    console.log("‚úÖ Presigned PUT URL generated.");

    console.log("‚òÅÔ∏è Attempting to upload trimmed audio to R2...");
    const uploadResponse = await fetch(putUrl, {
      method: "PUT",
      headers: {
        "Content-Type": "audio/mpeg",
      },
      body: trimmedBuffer,
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    if (!uploadResponse.ok) {
      const errorText = await uploadResponse.text();
      console.error(`‚ùå R2 upload failed with status ${uploadResponse.status}: ${errorText}`);
      throw new Error(`R2 upload failed: ${uploadResponse.status} - ${errorText}`);
    }
    console.log("‚úÖ Trimmed audio uploaded successfully to R2.");

    // --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô ---
    console.log(`üîó Generating presigned GET URL for object key: ${objectKey}`);
    const getUrl = await generatePresignedGetUrl(objectKey);
    console.log("‚úÖ Presigned GET URL generated.");

    console.log("üéâ All processes completed successfully! Final URL:", getUrl);
    return NextResponse.json({ url: getUrl }, { status: 200 });

  } catch (err) {
    console.error("‚ùå Uncaught error in processing:", err);
    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    // ‡πÉ‡∏ä‡πâ try-catch ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ö‡∏î‡∏ö‡∏±‡∏á error ‡∏´‡∏•‡∏±‡∏Å
    if (inputFilePath) {
      try {
        if (await fs.stat(inputFilePath)) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
          await fs.unlink(inputFilePath);
          console.log(`üßπ Cleaned up input file: ${inputFilePath}`);
        }
      } catch (cleanupErr: any) {
        if (cleanupErr.code !== 'ENOENT') { // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á log ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
          console.warn(`‚ö†Ô∏è Could not delete input file ${inputFilePath}:`, cleanupErr);
        }
      }
    }
    if (outputFilePath) {
      try {
        if (await fs.stat(outputFilePath)) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
          await fs.unlink(outputFilePath);
          console.log(`üßπ Cleaned up output file: ${outputFilePath}`);
        }
      } catch (cleanupErr: any) {
        if (cleanupErr.code !== 'ENOENT') { // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á log ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
          console.warn(`‚ö†Ô∏è Could not delete output file ${outputFilePath}:`, cleanupErr);
        }
      }
    }

    return NextResponse.json({ error: "Failed to process audio", details: (err as Error).message }, { status: 500 });
  }
}